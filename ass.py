import json
import colorsys

def get_speaker_colors(data):
    """Generate unique colors for each speaker ID"""
    # Extract unique speaker IDs from the data
    speaker_ids = set(word.get('speaker', 'UNKNOWN') for word in data['word_segments'])
    
    # Generate distinct colors for each speaker
    colors = {}
    for i, speaker in enumerate(speaker_ids):
        # Generate HSV colors with good separation, convert to RGB
        hue = i / len(speaker_ids)
        rgb = colorsys.hsv_to_rgb(hue, 0.8, 1.0)
        # Convert RGB to SSA hex color format (BBGGRR)
        color_hex = f"&H00{int(rgb[2]*255):02X}{int(rgb[1]*255):02X}{int(rgb[0]*255):02X}"
        colors[speaker] = color_hex
    
    return colors

def timestamp_to_milliseconds(timestamp):
    """Converts a timestamp to milliseconds."""
    hours, minutes, seconds = map(int, timestamp.split(":")[0:2] + timestamp.split(":")[2].split(",")[0].split("."))
    milliseconds = int(timestamp.split(",")[1])
    return hours * 3600000 + minutes * 60000 + seconds * 1000 + milliseconds
def milliseconds_to_timestamp(milliseconds):
    """Converts milliseconds to a timestamp."""
    hours, minutes, seconds = milliseconds // 3600000, (milliseconds % 3600000) // 60000, (milliseconds % 60000) // 1000
    hundredths = round(milliseconds % 1000 / 10) # Convert milliseconds to hundredths of a second and round
    return f"{hours:02d}:{minutes:02d}:{seconds:02d}.{hundredths:02d}"


# Load JSON data
file_path = "call_220b.json"
with open(file_path, 'r') as file:
    data = json.load(file)

# Get color mapping for speakers
speaker_colors = get_speaker_colors(data)

# ASS header
ass_header = """[Script Info]
; Script generated by ChatGPT-4
ScriptType: v4.00+
PlayResX: 384
PlayResY: 288
ScaledBorderAndShadow: yes
[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,16,&H000000FF,&Hffffff,&H0,&H00FFFF,0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,0
[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n"""

# Generate ASS data from word segments
ass_data = [ass_header]
for word in data['word_segments']:
    try:
        start_time = milliseconds_to_timestamp(int(word['start'] * 1000))
        end_time = milliseconds_to_timestamp(int(word['end'] * 1000))
        speaker = word.get('speaker', 'UNKNOWN')
        color = speaker_colors[speaker]
        formatted_word = f"{{\\fs40\\bord12.0\\c{color}}}" + word['word']
        dialogue_line = f"Dialogue: 0,{start_time},{end_time},Default,,0,0,0,," + formatted_word
        ass_data.append(dialogue_line)
    except:
        print(f"Problem processing: {word}")

# Save the generated .ass data to a file
ass_filename = "call_220b.ass"
with open(ass_filename, 'w') as file:
    file.write('\n'.join(ass_data))